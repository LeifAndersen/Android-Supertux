// This string is autogenerated by ChangeAppSettings.sh, do not change spaces amount
package org.onaips.supertux;

import javax.microedition.khronos.opengles.GL10;

import javax.microedition.khronos.egl.EGL10;
import javax.microedition.khronos.egl.EGL11;
import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.egl.EGLContext;
import javax.microedition.khronos.egl.EGLDisplay;
import javax.microedition.khronos.egl.EGLSurface;

import android.util.DisplayMetrics;
import android.util.Log;
import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.view.Display;
import android.view.MotionEvent;
import android.view.KeyEvent;
import android.view.Window;
import android.view.WindowManager;

import android.widget.TextView;
import java.lang.Thread;
import java.util.concurrent.locks.ReentrantLock;
import android.os.Build;



abstract class DifferentTouchInput
{

	public static DifferentTouchInput getInstance()
	{
		if (Integer.parseInt(Build.VERSION.SDK) <= 4)
			return SingleTouchInput.Holder.sInstance;
		else
			return MultiTouchInput.Holder.sInstance;
	}
	public abstract void process(final MotionEvent event);
	private static class SingleTouchInput extends DifferentTouchInput
	{
		private static class Holder 
		{
			private static final SingleTouchInput sInstance = new SingleTouchInput();
		}
		public void process(final MotionEvent event)
		{
			int action = -1;
			if( event.getAction() == MotionEvent.ACTION_DOWN )
				action = 0;
			if( event.getAction() == MotionEvent.ACTION_UP )
				action = 1;
			if( event.getAction() == MotionEvent.ACTION_MOVE )
				action = 2;
			if ( action >= 0 )
				DemoGLSurfaceView.nativeMouse( (int)event.getX(), (int)event.getY(), action, 0 );
		}
	}

	static int pointer1key=0;
	static int pointer1id=0;
	static int pointer2key=0;
	static int pointer2id=0;
	private static class MultiTouchInput extends DifferentTouchInput
	{
		private static class Holder 
		{
			private static final MultiTouchInput sInstance = new MultiTouchInput();
		}
		public void process(final MotionEvent e)
		{
			boolean masked=false;
			int action=e.getAction();


			for (int i = 0; i<e.getPointerCount(); i++) {

				switch(action & MotionEvent.ACTION_MASK) {
				case MotionEvent.ACTION_POINTER_DOWN:
				case MotionEvent.ACTION_POINTER_UP:
					masked = true;
					break;
				}
				if (masked && i != ((e.getAction() & MotionEvent.ACTION_POINTER_ID_MASK) >> MotionEvent.ACTION_POINTER_ID_SHIFT
						)) { continue; }

				int type = -1;
				switch(action & MotionEvent.ACTION_MASK) {
				case MotionEvent.ACTION_DOWN: type=1; break;
				case MotionEvent.ACTION_UP: type=0; break;
				case MotionEvent.ACTION_POINTER_DOWN: type=1; break;
				case MotionEvent.ACTION_POINTER_UP: type=0; break;
				case MotionEvent.ACTION_MOVE: type=2; break;
				case MotionEvent.ACTION_OUTSIDE: type=3; break;
				case MotionEvent.ACTION_CANCEL: type=4; break;
				} 

				int id=e.getPointerId(i);
				int x=(int) e.getX(id);
				int y=(int) e.getY(id);


				if (x<80 && y>MainActivity.screenHeight-80 && type>0)
				{
					if (pointer1key!=24)
					{
						DemoGLSurfaceView.nativeKey( pointer1key, 0 );
						pointer1key=24;
						pointer1id=id;

						DemoGLSurfaceView.nativeKey( pointer1key, 1 );

					}
/*					else
					{
						DemoGLSurfaceView.nativeKey( 24, 1 );
						pointer1id=id;
					}*/
				}
				else if (x<160 && y>MainActivity.screenHeight-80 && type>0)
				{
					if (pointer1key!=25)
					{
						DemoGLSurfaceView.nativeKey( pointer1key, 0 );
						pointer1key=25;
						pointer1id=id;

						DemoGLSurfaceView.nativeKey( pointer1key, 1 );
					}
					/*else
					{
						DemoGLSurfaceView.nativeKey(25, 1 );
						pointer1id=id;
					}*/
				}
				if (x>MainActivity.screenWidth-80 && y>MainActivity.screenHeight-80 && type>0)
				{
					if (pointer2key!=23)
					{
						DemoGLSurfaceView.nativeKey( pointer2key, 0 );
						pointer2key=23;
						pointer2id=id;

						DemoGLSurfaceView.nativeKey( pointer2key, 1 );
					}
					/*else
					{
						DemoGLSurfaceView.nativeKey( 23, 1 );
						pointer2id=id;
					}*/
				}
				else if (x>MainActivity.screenWidth-160 && y>MainActivity.screenHeight-80 && type>0)
				{
					if (pointer2key!=82)
					{
						DemoGLSurfaceView.nativeKey( pointer2key, 0 );
						pointer2key=82;
						pointer2id=id;

						DemoGLSurfaceView.nativeKey( pointer2key, 1 );
					}
					/*else{
						DemoGLSurfaceView.nativeKey(82, 1 );
						pointer2id=id;
					}*/

				}
				else
				{
					if (type==0 && pointer1key!=0 && pointer1id==id)
					{
						DemoGLSurfaceView.nativeKey( pointer1key, 0 );
						pointer1key=0;
						pointer1id=0;
					}
					else if (type==0 && pointer2key!=0 && pointer2id==id)
					{
						DemoGLSurfaceView.nativeKey( pointer2key, 0 );
						pointer2key=0;
						pointer2id=0;
					}
					else
						DemoGLSurfaceView.nativeMouse( x ,y, type, id );
				}

				if (masked) { break; }
			}
		}
	}

}

class DemoRenderer extends GLSurfaceView_SDL.Renderer {

	public DemoRenderer(Activity _context)
	{
		context = _context;
	}

	public void onSurfaceCreated(GL10 gl, EGLConfig config) {
		// nativeInit();

	}

	public void onSurfaceChanged(GL10 gl, int w, int h) {

		//gl.glViewport(0, 0, w, h);
		nativeResize(w, h);
	}

	public void onDrawFrame(GL10 gl) {
		nativeInitJavaCallbacks();

		// Make main thread priority lower so audio thread won't get underrun
		// Thread.currentThread().setPriority((Thread.currentThread().getPriority() + Thread.MIN_PRIORITY)/2);

		System.loadLibrary("sdl_mixer");
		System.loadLibrary("application");
		System.loadLibrary("sdl_main");

		//Settings.Apply();

		nativeInit(); // Calls main() and never returns, hehe - we'll call eglSwapBuffers() from native code
		System.exit(0);
	}

	public int swapBuffers() // Called from native code, returns 1 on success, 0 when GL context lost (user put app to background)
	{
		synchronized (this) {
			this.notify();
		}
		Thread.yield();
		return super.SwapBuffers() ? 1 : 0;
	}

	public void exitApp() {
		nativeDone();
	};

	private native void nativeInitJavaCallbacks();
	private native void nativeInit();
	private native void nativeResize(int w, int h);
	private native void nativeDone();

	private Activity context = null;

	private EGL10 mEgl = null;
	private EGLDisplay mEglDisplay = null;
	private EGLSurface mEglSurface = null;
	private EGLContext mEglContext = null;
}

class DemoGLSurfaceView extends GLSurfaceView_SDL {
	public DemoGLSurfaceView(Activity context) {
		super(context);
		mParent = context;


		touchInput = DifferentTouchInput.getInstance();
		setEGLConfigChooser(Globals.NeedDepthBuffer);
		//accelerometer = new AccelerometerReader(context);
		mRenderer = new DemoRenderer(context);
		setRenderer(mRenderer);
	}


	@Override
	public boolean onTouchEvent(final MotionEvent event) 
	{

		touchInput.process(event);
		// TODO: add multitouch support (added in Android 2.0 SDK)
		// Wait a bit, and try to synchronize to app framerate, or event thread will eat all CPU and we'll lose FPS
		synchronized (mRenderer) {
			try {
				mRenderer.wait(300L);
			}catch (InterruptedException e) { }
		}
		return true;
	};

	public void exitApp() {
		mRenderer.exitApp();
		// 		 accelerometer.stop();
		// 		 accelerometer = null;
	};


	@Override
	public boolean onKeyDown(int keyCode, final KeyEvent event) {
		if (event.getRepeatCount() == 0)
			nativeKey( keyCode, 1 );
		return true;
	}

	@Override
	public boolean onKeyUp(int keyCode, final KeyEvent event) {
		nativeKey( keyCode, 0 );
		return true;
	}

	DemoRenderer mRenderer;
	Activity mParent;
	// 	AccelerometerReader accelerometer = null;
	DifferentTouchInput touchInput = null;

	public static native void nativeMouse( int x, int y, int action, int pointerId );
	public static native void nativeKey( int keyCode, int down );
}


